<script src="/static/admin/js/pusher.min.js"></script>
<script>
    let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
        authEndPoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: 4001,
        forceTLS: false,
        enabledTransports: ["ws", "wss"],
        disabledTransports: [],
    });

    let publicChannel = pusher.subscribe("public-channel");

    // things we want to look for
    // - service goes down
    // - service comes up
    // - service status changed
    // - schedule changed
    // - monitoring is turned off
    // - next-run-event changes

    publicChannel.bind("app-starting", data => {
        successAlert(data.message);
    })

    publicChannel.bind("app-stopping", data => {
        warningAlert(data.message);
    })

    publicChannel.bind("host-service-status-changed", data => {
        attention.toast({
            msg: data.message,
            icon: "info",
            timer: 30000,
            showCloseButton: true,
        });

        // update tables

        // remove existing table row if it exists
        let hostServiceRow = document.getElementById("host-service-" + data.host_service_id);
        if (!!hostServiceRow) {
            hostServiceRow.parentNode.removeChild(hostServiceRow);
        }

        // update tables, if they exist
        let table = document.getElementById(data.status + "-table");
        if (!!table) {
            console.log("trying to add row to " + data.status + " table");
            let newRow = table.tBodies[0].insertRow(-1);

            newRow.setAttribute("id", "host-service-" + data.host_service_id);

            // insert the first td
            let newCell = newRow.insertCell(0);
            newCell.innerHTML = `
             <td>
                <span class="${data.icon}"></span>
                ${data.service_name}
                <span class="pointer badge bg-secondary" onclick="checkNow(${data.host_service_id}, '${data.status}')">Check Now</span>
            </td>
            `;

            // insert second td
            newCell = newRow.insertCell(1);
            if (data.status !== "pending") {
                newCell.innerHTML = `${data.last_check}`;
            } else {
                newCell.innerHTML = "Pending...";
            }

            // insert 3rd td
            newCell = newRow.insertCell(2);
        }
    })

    publicChannel.bind("host-service-count-changed", data => {
        if(!!document.getElementById("healthy_count")) {
            document.getElementById("healthy_count").innerHTML = data.healthy_count;
            document.getElementById("warning_count").innerHTML = data.warning_count;
            document.getElementById("problem_count").innerHTML = data.problem_count;
            document.getElementById("pending_count").innerHTML = data.pending_count;
        }
    })

    let attention = Prompt();

    {{if .Flash != ""}}
        successAlert('{{.Flash}}')
    {{end}}

    {{if .Warning != ""}}
        warningAlert('{{.Warning}}')
    {{end}}

    {{if .Error != ""}}
        errorAlert('{{.Error}}')
    {{end}}

    document.addEventListener("DOMContentLoaded", function() {
        let tabMap = new Map();
        let tabs = document.querySelectorAll('[data-toggle="tab"]');
        let i = 0;
        Array.prototype.filter.call(tabs, function (el) {
            el.addEventListener("click", function () {
                history.pushState("", document.title, window.location.pathname);
                localStorage.setItem('activeTab', el.getAttribute("data-target"));
            })
            // add it to map
            tabMap.set(el.getAttribute("href"), i);
            i++;
        });

        // show last selected tab, if exists
        if (!window.location.hash) {
            let activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
            }
        } else {
            // there is a hash in the url, so show appropriate tab
            if (tabMap.has(window.location.hash)) {
                document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(window.location.hash)].Tab.show()
            }
        }

        let monitoringChk = document.getElementById("monitoring-live");
        monitoringChk.addEventListener("change", function () {
            let enabled = monitoringChk.checked;
            if (!enabled) {
                attention.confirm({
                    html: "This will stop monitoring of all hosts and services. Are you sure?",
                    callback: result => {
                        if (result) {
                            // want to turn monitoring off
                            console.log("Would turn monitoring off");
                            updateSystemPref("monitoring_live", "0");
                            toggleMonitoring(0);
                        } else {
                            monitoringChk.checked = true;
                        }
                    }
                })
            } else {
                updateSystemPref("monitoring_live", "1");
                toggleMonitoring(1);
            }
        })
    })

    function updateSystemPref(prefName, prefValue) {
        let formData = new FormData();
        formData.append("pref_name", prefName);
        formData.append("pref_value", prefValue);
        formData.append("csrf_token", "{{.CSRFToken}}")

        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("post", "/admin/preference/ajax/set-system-pref");
        ajax.send(formData);
        ajax.onreadystatechange = function () {
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }

    function toggleMonitoring(enabled) {
        let formData = new FormData();
        formData.append("enabled", enabled);
        formData.append("csrf_token", "{{.CSRFToken}}")

        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("post", "/admin/preference/ajax/toggle-monitoring");
        ajax.send(formData);
        ajax.onreadystatechange = function () {
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }
</script>
